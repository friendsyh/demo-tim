package com.tim.common.datastructAndAlgori.algoriMethod;

/**
 * 贪心算法。在对问题求解时，总是做出在当前看来是最好的选择，也就是选择最好的贪心策略。
 * 贪心算法不是一个具体的算法，而是一个算法的思想，或者说解决问题的一种思路。
 *
 * 举例：1.背包问题 2.哈夫曼编码 3. 找零钱问题
 * 1. 背包问题。
 * 有一个背包，背包容量是M=150。有7个物品，物品可以分割成任意大小。
 * 要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。
 * 物品 A  B  C  D  E  F  G
 * 重量 35 30 60 50 40 10 25
 * 价值 10 40 30 50 35 40 30
 *
 * 分析:
 *（1）根据贪心的策略，每次挑选价值最大的物品装入背包，得到的结果是否最优？
 *（2）每次挑选所占重量最小的物品装入是否能得到最优解？
 *（3）每次选取单位重量价值最大的物品，成为解本题的最好策略。但是实践之后发现也不是，因为有A，B，C三个物体
 * 的单位重量价值比是一样的，不知道放哪个好。
 * 值得注意的是，贪心算法并不是完全不可以使用，贪心策略一旦经过证明成立后，它就是一种高效的算法。
 * 贪心算法还是很常见的算法之一，这是由于它简单易行，构造贪心策略不是很困难。
 * 可惜的是，它需要证明后才能真正运用到题目的算法中。
 * 一般来说，贪心算法的证明围绕着：整个问题的最优解一定由在贪心策略中存在的子问题的最优解得来的。
 *
 * Created by tim.syh on 2017/8/8.
 */
public class Greedy {

    public static void main(String[] args) {

    }
}
